use chrono::offset::{Local, TimeZone};
use chrono::Date;

/// データの取得（固定値）
pub fn get_data() -> Vec<(&'static str, f32)> {
    return vec![
        ("2021-06-22", 9960.0), ("2021-06-23", 9782.0),
        ("2021-06-24", 9824.0), ("2021-06-25", 9849.0),
        ("2021-06-28", 9842.0), ("2021-06-29", 9740.0),
        ("2021-06-30", 9710.0), ("2021-07-01", 9690.0),
        ("2021-07-02", 9820.0), ("2021-07-05", 9772.0),
        ("2021-07-06", 9794.0), ("2021-07-07", 9734.0),
        ("2021-07-08", 9675.0), ("2021-07-09", 9650.0),
        ("2021-07-12", 9815.0), ("2021-07-13", 9865.0),
        ("2021-07-14", 9869.0), ("2021-07-15", 9832.0),
        ("2021-07-16", 9866.0), ("2021-07-19", 9740.0),
        ("2021-07-20", 9612.0), ("2021-07-21", 9725.0),
        ("2021-07-26", 9829.0), ("2021-07-27", 9871.0),
        ("2021-07-28", 9804.0), ("2021-07-29", 9856.0),
        ("2021-07-30", 9805.0), ("2021-08-02", 10030.0),
    ];
}

/// 日付の文字列をDate型に変換
pub fn parse_time(time_str: &str) -> Date<Local> {
    Local.datetime_from_str(
        &format!("{} 0:0", time_str),
        "%Y-%m-%d %H:%M"
    )
    .unwrap()
    .date()
}